{
  "name": "sun-moon",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "sun-moon.tsx",
      "content": "'use client';\n\nimport type { Variants } from 'motion/react';\nimport { motion, useAnimation } from 'motion/react';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\n\nexport interface SunMoonIconHandle {\n  startAnimation: () => void;\n  stopAnimation: () => void;\n}\n\nconst sunVariants: Variants = {\n  normal: {\n    rotate: 0,\n  },\n  animate: {\n    rotate: [0, -5, 5, -2, 2, 0],\n    transition: {\n      duration: 1.5,\n      ease: 'easeInOut',\n    },\n  },\n};\n\nconst moonVariants: Variants = {\n  normal: { opacity: 1 },\n  animate: (i: number) => ({\n    opacity: [0, 1],\n    transition: { delay: i * 0.1, duration: 0.3 },\n  }),\n};\n\nconst SunMoonIcon = forwardRef<SunMoonIconHandle, object>((props, ref) => {\n  const sunControls = useAnimation();\n  const moonControls = useAnimation();\n  const isControlledRef = useRef(false);\n\n  useImperativeHandle(ref, () => {\n    isControlledRef.current = true;\n\n    return {\n      startAnimation: () => {\n        sunControls.start('animate');\n        moonControls.start('animate');\n      },\n      stopAnimation: () => {\n        sunControls.start('normal');\n        moonControls.start('normal');\n      },\n    };\n  });\n\n  const handleMouseEnter = useCallback(() => {\n    if (!isControlledRef.current) {\n      sunControls.start('animate');\n      moonControls.start('animate');\n    }\n  }, [sunControls, moonControls]);\n\n  const handleMouseLeave = useCallback(() => {\n    if (!isControlledRef.current) {\n      sunControls.start('normal');\n      moonControls.start('normal');\n    }\n  }, [sunControls, moonControls]);\n\n  return (\n    <div\n      className=\"cursor-pointer select-none p-2 hover:bg-accent rounded-md transition-colors duration-200 flex items-center justify-center\"\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        className=\"lucide lucide-sun-moon\"\n      >\n        <motion.g variants={sunVariants} animate={sunControls} initial=\"normal\">\n          <path d=\"M12 8a2.83 2.83 0 0 0 4 4 4 4 0 1 1-4-4\" />\n        </motion.g>\n        {[\n          'M12 2v2',\n          'M12 20v2',\n          'm4.9 4.9 1.4 1.4',\n          'm17.7 17.7 1.4 1.4',\n          'M2 12h2',\n          'M20 12h2',\n          'm6.3 17.7-1.4 1.4',\n          'm19.1 4.9-1.4 1.4',\n        ].map((d, index) => (\n          <motion.path\n            key={d}\n            d={d}\n            animate={moonControls}\n            variants={moonVariants}\n            custom={index + 1}\n            initial=\"normal\"\n          />\n        ))}\n      </svg>\n    </div>\n  );\n});\n\nSunMoonIcon.displayName = 'SunMoonIcon';\n\nexport { SunMoonIcon };\n",
      "type": "registry:ui"
    }
  ]
}